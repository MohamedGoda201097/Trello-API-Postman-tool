{
	"info": {
		"_postman_id": "5ba52e5f-2158-4dda-90c5-931dacfd0e85",
		"name": "GraduationProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23485356"
	},
	"item": [
		{
			"name": "Bored",
			"item": [
				{
					"name": "Create a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"BoardName\",\" Orange \");\r",
									"\r",
									" pm.environment.set(\"BoredDes\",\"This Boared Color is : \"\r",
									" +pm.environment.get(\"BoardName\")); \r",
									"\r",
									" \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Board Name is correct\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"BoardName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Board description is correct\", function () {\r",
									"    pm.expect(jsonData.desc).to.eql(pm.environment.get(\"BoredDes\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Bored_ID\", jsonData.id);\r",
									"\r",
									"pm.test(\"Checking Closed Attribute is false\", function () {\r",
									"    pm.expect(jsonData.closed).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking pinned value is false\", function () {\r",
									"    pm.expect(jsonData.pinned).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify background is 'orange'\", function () {\r",
									"    pm.expect(jsonData.prefs.background).to.eql(\"orange\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"prefs_background\": \"orange\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Trello2_url}}/1/boards/?name={{BoardName}}&key={{key}}&token={{token}}&desc={{BoredDes}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{BoardName}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "desc",
									"value": "{{BoredDes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" let random=Math.floor(Math.random()*100+1);\r",
									" pm.environment.set(\"UpdataBoaredName\",\"Name \"+random)\r",
									"\r",
									"  pm.environment.set(\"UpdateDes\",\" The New Name of Board is :\"+\r",
									"  pm.environment.get(\"UpdataBoaredName\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Board Update name is Correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"UpdataBoaredName\"));\r",
									"});\r",
									"pm.test(\"Board Update description is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.desc).to.eql(pm.environment.get(\"UpdateDes\"));\r",
									"});\r",
									"pm.test(\"Closed Attributes is Correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.closed).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Pinned Value is a fasle\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.pinned).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{Trello2_url}}/1/boards/{{Bored_ID}}?key={{key}}&token={{token}}&name={{UpdataBoaredName}}&desc={{UpdateDes}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{Bored_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{UpdataBoaredName}}"
								},
								{
									"key": "desc",
									"value": "{{UpdateDes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Boared name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"UpdataBoaredName\"));\r",
									"});\r",
									"pm.test(\" Description is Correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.desc).to.eql(pm.environment.get(\"UpdateDes\"));\r",
									"});\r",
									"pm.test(\"Board name is not correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.not.eql(pm.environment.get(\"BoardName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that name board is not equal created rquest name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.not.eql(pm.environment.get(\"BoardName\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/boards/{{Bored_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{Bored_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List",
			"item": [
				{
					"name": "Create List one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();\r",
									"pm.environment.set(\"List_1_ID\",jsonData.id);\r",
									"\r",
									"pm.test(\"Verify That Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Name of list one  is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"NameOfList1\"));\r",
									"});\r",
									"pm.test(\"Closed Attribute is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.closed).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"NameOfList1\",\"list One\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{Trello2_url}}/1/lists?name={{NameOfList1}}&idBoard={{Bored_ID}}&key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NameOfList1}}"
								},
								{
									"key": "idBoard",
									"value": "{{Bored_ID}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List Two",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();\r",
									"pm.environment.set(\"List_2_ID\",jsonData.id);\r",
									"\r",
									"pm.test(\"Verify That Status code is 200ms\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Name of list is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"NameOfList2\"));\r",
									"});\r",
									"pm.test(\"Closed Attribute is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.closed).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"NameOfList2\",\"list Two\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{Trello2_url}}/1/lists?name={{NameOfList2}}&idBoard={{Bored_ID}}&key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NameOfList2}}"
								},
								{
									"key": "idBoard",
									"value": "{{Bored_ID}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\" Name of list 1 is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"NameOfList1\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"pos\": \"bottom\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Trello2_url}}/1/lists/{{List_1_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{List_1_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive ListTwo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n     \"closed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Trello2_url}}/1/lists/{{List_2_ID}}/?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{List_2_ID}}",
								""
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the schema validation test and added proper closing for the first test\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"ID of List one is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"List_1_ID\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Trello2_url}}/1/lists/{{List_1_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{List_1_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"ID of List one is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"List_2_ID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify list two is closed \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.closed).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Trello2_url}}/1/lists/{{List_2_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{List_2_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card",
			"item": [
				{
					"name": "Create Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();\r",
									"pm.environment.set(\"Card1_ID\",jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Card name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"Card_Name1\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Card Id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Card1_ID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let random=Math.floor(Math.random()*100)+1;\r",
									"pm.environment.set(\"Card_Name1\",\"Test Cases for card 1 :  \" +random);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/cards?idList={{List_1_ID}}&key={{key}}&token={{token}}&name={{Card_Name1}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{List_1_ID}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{Card_Name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"CommentCard1\",\"This Card Name Is : \"+pm.environment.get(\"Card_Name1\") \r",
									"+\" \"+\" \"+ \"It was Created on \"+pm.environment.get(\"NameOfList1\"))\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Trello2_url}}/1/cards/{{Card1_ID}}/actions/comments?text={{CommentCard1}}&key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{Card1_ID}}",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "{{CommentCard1}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify id for Card one\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Card1_ID\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/cards/{{Card1_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{Card1_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card 2",
			"item": [
				{
					"name": "Create Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();\r",
									"pm.environment.set(\"Card2_ID\",jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Card name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"Card_Name_2\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Card Id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Card2_ID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let random=Math.floor(Math.random()*100)+1;\r",
									"pm.environment.set(\"Card_Name_2\",\"Test Cases of Card 2 : \"+ random);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/cards?idList={{List_1_ID}}&key={{key}}&token={{token}}&name={{Card_Name_2}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{List_1_ID}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{Card_Name_2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"CommentId2\",\" This Card Name Is : \" +pm.environment.get(\"Card_Name_2\") \r",
									"+\" \"+ \" It was Created on :\" +pm.environment.get(\"NameOfList1\"))\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Trello2_url}}/1/cards/{{Card2_ID}}/actions/comments?text={{CommentId2}}&key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{Card2_ID}}",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "{{CommentId2}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\" Verify card id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Card2_ID\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/cards/{{Card2_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{Card2_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card 3",
			"item": [
				{
					"name": "Create Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();\r",
									"pm.environment.set(\"Card3_ID\",jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Card name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"Card3_Name\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Card Id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Card3_ID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let random=Math.floor(Math.random()*100)+1;\r",
									"pm.environment.set(\"Card3_Name\",\"Test Cases for Card 3 : \" +random);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/cards?idList={{List_1_ID}}&key={{key}}&token={{token}}&name={{Card3_Name}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{List_1_ID}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{Card3_Name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"CommentCard3\",\"This Card Name Is : \"+pm.environment.get(\"Card3_Name\") \r",
									"+\" \"+\" It was Created on :\"+ pm.environment.get(\"NameOfList1\"))\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Trello2_url}}/1/cards/{{Card3_ID}}/actions/comments?text={{CommentCard3}}&key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{Card3_ID}}",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "{{CommentCard3}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that id for Card 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Card3_ID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Trello2_url}}/1/cards/{{Card3_ID}}?key={{key}}&token={{token}}",
							"host": [
								"{{Trello2_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{Card3_ID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get  Card of List One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{Trello2_url}}/1/lists/{{List_1_ID}}/cards?key={{key}}&token={{token}}",
					"host": [
						"{{Trello2_url}}"
					],
					"path": [
						"1",
						"lists",
						"{{List_1_ID}}",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Trello2_url}}/1/boards/{{Bored_ID}}?key={{key}}&token={{token}}",
					"host": [
						"{{Trello2_url}}"
					],
					"path": [
						"1",
						"boards",
						"{{Bored_ID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "List_Name",
			"value": "List one , List two"
		}
	]
}